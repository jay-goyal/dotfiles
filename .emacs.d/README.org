#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+AUTHOR: Jay Goyal

* Basic Config
If I don't set it up, Emacs Complains

#+begin_src emacs-lisp
  ;;; init.el --- Initialization file for Emacs
  ;;; Commentary:
  ;;; Emacs Startup File --- initialization for Emacs
  ;;; Code:
#+end_src

** Basic Settings

#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Backup Files setting
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backup"))
		backup-by-copying t    ; Don't delink hardlinks
		version-control t      ; Use version numbers on backups
		delete-old-versions t  ; Automatically delete excess backups
		kept-new-versions 10   ; how many of the newest versions to keep
		kept-old-versions 0    ; and how many of the old
		)
  (setq auto-save-file-name-transforms
		`((".*" ,temporary-file-directory t)))
										  ; auto save path
  (defvar autosave-dir (concat "~/auto-save" "/"))
  (make-directory autosave-dir t)
  (setq auto-save-file-name-transforms
		`(("\\(?:[^/]*/\\)*\\(.*\\)" ,(concat autosave-dir "\\1") t)))

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; Disable warnings showing
  (setq warning-minimum-level :emergency)

  (setq-default tab-width 4)  ; Set Tab length
  (setq display-line-numbers-type 'relative)
#+end_src

** Font Settings

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "FiraCode Nerd Font Mono" :height 150)
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font Mono" :height 150)
  (set-face-attribute 'variable-pitch nil :font "Roboto" :height 150 :weight 'regular)
  (add-to-list 'initial-frame-alist '(font . "FiraCode Nerd Font Mono-12"))
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-12"))
#+end_src

* Package Management Setup

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
						   ("org" . "https://orgmode.org/elpa/")
						   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
	(package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
	(package-install 'use-package))
  (require 'use-package)
  (setf use-package-always-ensure t)
  (use-package use-package-ensure-system-package)
#+end_src

* Theming
** Line Numbers
I use relative line numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode 1)
  ;; Disable line numbers for some modes
  (dolist (mode '(shell-mode-hook
				  eshell-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Modeline
Run all-the-icons-install-fonts first time

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
	:init
	(doom-modeline-mode 1)
	:custom
	((doom-modeline-height 15)
	 (doom-modeline-icon t)
     (doom-themes-org-config)
	 (doom-modeline-major-mode-icon t)))

#+end_src

** Catppuccin Theme

#+begin_src emacs-lisp
	(use-package autothemer)
	(use-package catppuccin-theme
	  :config (load-theme 'catppuccin t))
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
	:init
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(setq dashboard-banner-logo-title "Emacs is Evil")
	(setq dashboard-startup-banner "~/.emacs.d/emacs.png")
	(setq dashboard-center-content nil)
	(setq dashboard-items '((bookmarks . 3)
							(projects . 5)
							(recents . 5)
							(agenda . 5 )))
	:config
	(dashboard-setup-startup-hook)
	(dashboard-modify-heading-icons '((recents . "file-text")
									  (bookmarks . "book"))))

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Ivy
I use Ivy as my completion engine.

#+begin_src emacs-lisp
  (use-package swiper)

  (use-package counsel
	:bind
	(("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))
  (use-package ivy
	:diminish
	:bind
	(("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
	:config
	(ivy-mode 1))

  (use-package ivy-rich
	:init
	(ivy-rich-mode 1))
#+end_src

* Evil Mode
I love the dark side

#+begin_src emacs-lisp
  (use-package evil
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(setq evil-vsplit-window-right t)
	(setq evil-want-C-i-jump nil)
	(setq evil-split-window-below t)
	(evil-mode)
	:config
	(evil-mode 1)
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	;; Use visual line motions even outside of visual-line-mode buffers
	(evil-global-set-key 'motion "j" 'evil-next-visual-line)
	(evil-global-set-key 'motion "k" 'evil-previous-visual-line))


  (use-package evil-collection
	:after evil
	:config
	(setq evil-collection-mode-list '(dashboard dired ibuffer magit))
	(evil-collection-init))
#+end_src

* Setup Keyboard Shortcuts
I use general for my keybindings

#+begin_src emacs-lisp
  (use-package general
	:config
	(general-evil-setup t)
	(general-create-definer sme/leader-keys
	  :keymaps '(normal insert visual emacs)
	  :prefix "SPC"
	  :global-prefix "C-SPC")
	(general-imap "j"
	  (general-key-dispatch 'self-insert-command
		:timeout 0.25
		"k" 'evil-normal-state)))

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
	"scale text"
	("j" text-scale-increase "in")
	("k" text-scale-decrease "out")
	("f" nil "finished" :exit t))

  (sme/leader-keys
	"x" '(counsel-M-x :which-key "Execute a command")
	"b" '(lsp-format-buffer :which-key "Format the buffer")
	"ts" '(hydra-text-scale/body :which-key "Scale text")
	"tt" '(counsel-load-theme :which-key "Choose theme")
	"td" '(dired :which-key "Open dired")
	"tb" '(switch-to-buffer :which-key "Switch to a particular buffer")
	;;dap mode
	"da" '(dap-breakpoint-add :which-key "Add a breakpoint")
	"dd" '(dap-breakpoint-delete :which-key "Delete the breakpoint")
	"f" '(treemacs :which-key "Treemacs"))
#+end_src

* Project Management
I use projectile for my project management

#+begin_src emacs-lisp
  (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:init
	(when (file-directory-p "~/projects")
	  (setq projectile-project-search-path '("~/projects"))))

  (projectile-register-project-type 'js '("package.json")
									:project-file "package.json"
									:compile "pnpm build"
									:test "pnpm test"
									:run "pnpm dev"
									:test-suffix ".spec")
  (sme/leader-keys
	"p" '(projectile-command-map :which-key "Projectile Commands"))

  (use-package counsel-projectile
	:config (counsel-projectile-mode))
#+end_src

* Dired
Setting up Dired
#+begin_src emacs-lisp
  (use-package dired
	:ensure nil
	:commands (dired dired-jump)
	:bind (("C-x C-j" . dired-jump))
	:custom ((dired-listing-switches "-agho --group-directories-first"))
	:config
	(evil-collection-define-key 'normal 'dired-mode-map
	  "h" 'dired-single-up-directory
	  "l" 'dired-single-buffer))

  (use-package dired-single)

  (use-package all-the-icons-dired
	:hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
	:hook (dired-mode . dired-hide-dotfiles-mode)
	:config
	(evil-collection-define-key 'normal 'dired-mode-map
	  "H" 'dired-hide-dotfiles-mode))
#+end_src

** Treemacs (Ik.. Not dired)
#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

* Development
** Setting up LSP Mode
   
#+begin_src emacs-lisp
  (use-package lsp-mode
	:commands
	(lsp lsp-deferred)
	:hook
	((c++-mode solidity-mode c-mode web-mode vue-mode) . lsp)
	:init
	(setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
	:custom
	(lsp-clangd-binary-path "/usr/bin/clangd")
	(lsp-rust-analyzer-server-display-inlay-hints t)
	(lsp-vetur-format-default-formatter-css "prettier")
	(lsp-vetur-format-default-formatter-html "prettier")
	(lsp-vetur-format-default-formatter-js "prettier")
	(lsp-vetur-validation-template nil)
	:config
	(setq lsp-signature-render-documentation nil)
	(setq lsp-headerline-breadcrumb-enable nil)
	(setq lsp-enable-which-key-integration t))

  (use-package lsp-ui
	:hook (lsp-mode . lsp-ui-mode)
	:custom
	(lsp-ui-doc-position 'bottom))


  (use-package lsp-ivy)
#+end_src

** Company Mode

#+begin_src emacs-lisp
  (use-package company
	:after lsp-mode
	:hook
	((lsp-mode solidity-mode) . company-mode)
	:bind
	(:map company-active-map
		  ("<tab>" . company-complete-selection)
		  ("C-j" . company-select-next)
		  ("C-k . company-select-previous"))
	(:map lsp-mode-map
		  ("<tab>" . company-indent-or-complete-common))
	:custom
	(company-minimum-prefix-length 1)
	(company-idle-delay 0.0))

  (use-package company-box
	:hook (company-mode . company-box-mode))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet :config (yas-global-mode))
#+end_src

** Rust Setup

#+begin_src emacs-lisp
  (use-package flycheck
	:hook (solidity-mode . flycheck-mode))

  (use-package rustic
	:bind (:map rustic-mode-map
				("M-j" . lsp-ui-imenu)
				("M-?" . lsp-find-references)
				("C-c l" . flycheck-list-errors)
				("C-c a" . lsp-execute-code-action)
				("C-c r" . lsp-rename)
				("C-c C-r" . lsp-workspace-restart)
				("C-c q" . lsp-workspace-shutdown)
				("C-c s" . lsp-rust-analyzer-status))
	:config
	;; comment to disable rustfmt on save
	(setq rustic-format-on-save t))

  (use-package cargo
	:hook(rustic-mode . cargo-minor-mode))
  (sme/leader-keys
	;;cargo shortcuts
	"rb" '(cargo-process-build :which-key "Build the rust project")
	"rn" '(cargo-process-new :which-key "Create a new rust project")
	"rr" '(cargo-process-run :which-key "Run the rust project")
	"rt" '(cargo-process-test :which-key "Run the tests for rust project"))

  (use-package toml-mode)
#+end_src

** JS/TS
#+begin_src emacs-lisp
  (use-package prettier-js
	:hook (web-mode . prettier-js-mode)
	:config
	(setq prettier-js-show-errors nil)
	(setq prettier-js-command "/home/jay/.local/share/pnpm/prettier")
	(setq prettier-js-args '("--tab-width" "2")))
#+end_src

** React
#+begin_src emacs-lisp
  (use-package react-snippets)
#+end_src
   
** HTML
#+begin_src emacs-lisp
  (use-package emmet-mode
	:mode ("\\.html?\\'" . emmet-mode)
	:bind ("C-l" . emmet-expand-line))

  (defun sme/web-mode-setup()
	(set (make-local-variable
		  'company-backends) '((
								company-web-html
								company-css
								company-dabbrev-code
								company-dabbrev
								))))

  (use-package web-mode
	:mode (("\\.html\\'" . web-mode)
		   ("\\.css\\'" . web-mode)
		   ("\\.scss\\'" . web-mode)
		   ("\\.js\\'" . web-mode)
		   ("\\.ts\\'" . web-mode)
		   ("\\.tsx\\'" . web-mode)
		   ("\\.jsx\\'" . web-mode)
		   ("\\.vue\\'" . web-mode)
		   ("\\.svelte\\'" . web-mode))
	:hook (web-mode . sme/web-mode-setup)
	:config
	(setq-default web-mode-code-indent-offset 2)
	(setq-default web-mode-markup-indent-offset 2)
	(setq-default web-mode-attribute-indent-offset 2))
#+end_src  

** Solidity
#+begin_src emacs-lisp
  (defun sme/solidity-mode-setup()
	(set (make-local-variable
		  'company-backends) '(company-solidity)))

  (use-package solidity-mode
	:mode ("\\.sol\\'" . solidity-mode)
	:hook (solidity-mode . sme/solidity-mode-setup)
	:config
	(setq solidity-solc-path "/usr/bin/solc")
	(setq solidity-solium-path "/home/jay/.local/share/pnpm/solium")
	(setq solidity-comment-style 'slash)
	(setq solidity-flycheck-solc-checker-active t)
	(setq solidity-flycheck-solium-checker-active t))

  (use-package solidity-flycheck)
  (use-package company-solidity)

  (defgroup lsp-solidity nil
	"LSP support for solidityl using solidity-language-server."
	:group 'lsp-mode
	:link '(url-link "https://www.npmjs.com/package/solidity-language-server"))

  (defcustom lsp-clients-solidity-executable '("solidity-language-server"  "--stdio")
	"Command to start the solidity language server."
	:group 'lsp-solidity
	:risky t
	:type 'file)

  (defcustom lsp-clients-solidity-initialization-options '()
	"Initialization options for solidity language server."
	:group 'lsp-solidity
	:type 'alist)

  (lsp-dependency 'solidity-language-server
				  '(:system "solidity-language-server")
				  '(:npm :package "solidity-ls"
						 :path "solidity-ls"))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection
									 (lambda ()
									   `(,(or (executable-find (cl-first lsp-clients-solidity-executable))
											  (lsp-package-path 'solidity-language-server))
										 ,@(cl-rest lsp-clients-solidity-executable))))
					:major-modes '(solidity-mode)
					:priority -1
					:server-id 'solidity-ls
					:initialization-options (lambda () lsp-clients-solidity-initialization-options)
					:download-server-fn (lambda (_client callback error-callback _update?)
										  (lsp-package-ensure 'solidity-language-server
															  callback error-callback))))
#+end_src
  
** Misc

#+begin_src emacs-lisp
  ;; Commenting
  (use-package evil-nerd-commenter
	:bind ("C-/" . evilnc-comment-or-uncomment-lines))

  ;; Automatic pairing of parantheses
  (electric-pair-mode 1)
#+end_src 

* Terminal
#+begin_src emacs-lisp
  (use-package vterm
	:config (setq term-prompt-regexp "~?.* (\[[^\[\]]+\])* *❯"))
  (use-package vterm-toggle
	:bind
	(:map vterm-mode-map
		  ("<C-return>" . vterm-toggle-insert-cd))
	:config
	(add-to-list 'display-buffer-alist
				 '("\*vterm\*"
				   (display-buffer-in-side-window)
				   (window-height . 0.3)
				   (side . bottom)
				   (slot . 0))))
  (sme/leader-keys
	"`" '(vterm-toggle :which-key "Toggle vterm"))
#+end_src
   
* Magit.... Frickin' Finally

#+begin_src emacs-lisp
  (use-package magit
	:custom
	(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (sme/leader-keys
	"g" '(magit-status :which-key "Open Magit Status Pane"))

  (use-package forge)
#+end_src

* Org Mode

#+begin_src emacs-lisp
  (defun sme/org-font-setup ()
	;; Replace list hyphen with dot
	(font-lock-add-keywords 'org-mode
							'(("^ *\\([-]\\) "
							   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

	;; Set faces for heading levels
	(dolist (face '((org-level-1 . 1.2)
					(org-level-2 . 1.1)
					(org-level-3 . 1.05)
					(org-level-4 . 1.0)
					(org-level-5 . 1.1)
					(org-level-6 . 1.1)
					(org-level-7 . 1.1)
					(org-level-8 . 1.1)))
	  (set-face-attribute (car face) nil :font "FiraCode Nerd Font Mono" :weight 'regular :height (cdr face))))
  (use-package org
	:hook
	(org-mode . sme/org-font-setup)
	:config
	(setq org-ellipsis " ▾")
	(setq org-html-validation-link nil))

  (use-package org-bullets
	:after org
	:hook (org-mode . org-bullets-mode)
	:custom
	(org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
#+end_src
  
* Other Miscellaneous Packages

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))

  (use-package format-all)

  (use-package which-key
	:init
	(which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 0.5))

  (use-package helpful
	:custom
	(counsel-describe-function-function #'helpful-callable)
	(counsel-describe-variable-function #'helpful-variable)
	:bind
	([remap describe-function] . counsel-describe-function)
	([remap describe-command] . helpful-command)
	([remap describe-variable] . counsel-describe-variable)
	([remap describe-key] . helpful-key))
#+end_src

* Other Basic Stuff
More stuff to stop emacs from complaining

#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src
